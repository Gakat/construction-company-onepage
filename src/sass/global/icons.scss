// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$email-name: 'email';
$email-x: 90px;
$email-y: 0px;
$email-offset-x: -90px;
$email-offset-y: 0px;
$email-width: 37px;
$email-height: 37px;
$email-total-width: 127px;
$email-total-height: 127px;
$email-image: '../images/icons.png';
$email: (90px, 0px, -90px, 0px, 37px, 37px, 127px, 127px, '../images/icons.png', 'email', );
$facebook-f-name: 'facebook-f';
$facebook-f-x: 0px;
$facebook-f-y: 0px;
$facebook-f-offset-x: 0px;
$facebook-f-offset-y: 0px;
$facebook-f-width: 45px;
$facebook-f-height: 45px;
$facebook-f-total-width: 127px;
$facebook-f-total-height: 127px;
$facebook-f-image: '../images/icons.png';
$facebook-f: (0px, 0px, 0px, 0px, 45px, 45px, 127px, 127px, '../images/icons.png', 'facebook-f', );
$facebook-name: 'facebook';
$facebook-x: 90px;
$facebook-y: 37px;
$facebook-offset-x: -90px;
$facebook-offset-y: -37px;
$facebook-width: 36px;
$facebook-height: 37px;
$facebook-total-width: 127px;
$facebook-total-height: 127px;
$facebook-image: '../images/icons.png';
$facebook: (90px, 37px, -90px, -37px, 36px, 37px, 127px, 127px, '../images/icons.png', 'facebook', );
$instagram-f-name: 'instagram-f';
$instagram-f-x: 45px;
$instagram-f-y: 0px;
$instagram-f-offset-x: -45px;
$instagram-f-offset-y: 0px;
$instagram-f-width: 45px;
$instagram-f-height: 45px;
$instagram-f-total-width: 127px;
$instagram-f-total-height: 127px;
$instagram-f-image: '../images/icons.png';
$instagram-f: (45px, 0px, -45px, 0px, 45px, 45px, 127px, 127px, '../images/icons.png', 'instagram-f', );
$instagram-name: 'instagram';
$instagram-x: 0px;
$instagram-y: 90px;
$instagram-offset-x: 0px;
$instagram-offset-y: -90px;
$instagram-width: 36px;
$instagram-height: 37px;
$instagram-total-width: 127px;
$instagram-total-height: 127px;
$instagram-image: '../images/icons.png';
$instagram: (0px, 90px, 0px, -90px, 36px, 37px, 127px, 127px, '../images/icons.png', 'instagram', );
$linked-in-f-name: 'linked-in-f';
$linked-in-f-x: 0px;
$linked-in-f-y: 45px;
$linked-in-f-offset-x: 0px;
$linked-in-f-offset-y: -45px;
$linked-in-f-width: 45px;
$linked-in-f-height: 45px;
$linked-in-f-total-width: 127px;
$linked-in-f-total-height: 127px;
$linked-in-f-image: '../images/icons.png';
$linked-in-f: (0px, 45px, 0px, -45px, 45px, 45px, 127px, 127px, '../images/icons.png', 'linked-in-f', );
$phone-name: 'phone';
$phone-x: 72px;
$phone-y: 90px;
$phone-offset-x: -72px;
$phone-offset-y: -90px;
$phone-width: 36px;
$phone-height: 36px;
$phone-total-width: 127px;
$phone-total-height: 127px;
$phone-image: '../images/icons.png';
$phone: (72px, 90px, -72px, -90px, 36px, 36px, 127px, 127px, '../images/icons.png', 'phone', );
$twitter-f-name: 'twitter-f';
$twitter-f-x: 45px;
$twitter-f-y: 45px;
$twitter-f-offset-x: -45px;
$twitter-f-offset-y: -45px;
$twitter-f-width: 45px;
$twitter-f-height: 45px;
$twitter-f-total-width: 127px;
$twitter-f-total-height: 127px;
$twitter-f-image: '../images/icons.png';
$twitter-f: (45px, 45px, -45px, -45px, 45px, 45px, 127px, 127px, '../images/icons.png', 'twitter-f', );
$twitter-name: 'twitter';
$twitter-x: 36px;
$twitter-y: 90px;
$twitter-offset-x: -36px;
$twitter-offset-y: -90px;
$twitter-width: 36px;
$twitter-height: 37px;
$twitter-total-width: 127px;
$twitter-total-height: 127px;
$twitter-image: '../images/icons.png';
$twitter: (36px, 90px, -36px, -90px, 36px, 37px, 127px, 127px, '../images/icons.png', 'twitter', );
$spritesheet-width: 127px;
$spritesheet-height: 127px;
$spritesheet-image: '../images/icons.png';
$spritesheet-sprites: ($email, $facebook-f, $facebook, $instagram-f, $instagram, $linked-in-f, $phone, $twitter-f, $twitter, );
$spritesheet: (127px, 127px, '../images/icons.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
